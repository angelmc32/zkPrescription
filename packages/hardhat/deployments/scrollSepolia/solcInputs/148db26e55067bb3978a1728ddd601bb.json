{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n\tuint8 v; // The recovery ID.\n\tbytes32 r; // The x-coordinate of the nonce R.\n\tbytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n\tbytes32 uid; // A unique identifier of the attestation.\n\tbytes32 schema; // The unique identifier of the schema.\n\tuint64 time; // The time when the attestation was created (Unix timestamp).\n\tuint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n\tuint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n\tbytes32 refUID; // The UID of the related attestation.\n\taddress recipient; // The recipient of the attestation.\n\taddress attester; // The attester/sender of the attestation.\n\tbool revocable; // Whether the attestation is revocable.\n\tbytes data; // Custom attestation data.\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n\tunchecked {\n\t\tj = i + 1;\n\t}\n}\n"
    },
    "contracts/interfaces/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { ISemver } from \"./ISemver.sol\";\nimport { Attestation, Signature } from \"../Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n\taddress recipient; // The recipient of the attestation.\n\tuint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n\tbool revocable; // Whether the attestation is revocable.\n\tbytes32 refUID; // The UID of the related attestation.\n\tbytes data; // Custom attestation data.\n\tuint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tAttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tAttestationRequestData data; // The arguments of the attestation request.\n\tSignature signature; // The ECDSA signature data.\n\taddress attester; // The attesting account.\n\tuint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tAttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tAttestationRequestData[] data; // The arguments of the attestation requests.\n\tSignature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n\taddress attester; // The attesting account.\n\tuint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n\tbytes32 uid; // The UID of the attestation to revoke.\n\tuint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tRevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tRevocationRequestData data; // The arguments of the revocation request.\n\tSignature signature; // The ECDSA signature data.\n\taddress revoker; // The revoking account.\n\tuint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tRevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n\tbytes32 schema; // The unique identifier of the schema.\n\tRevocationRequestData[] data; // The arguments of the revocation requests.\n\tSignature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n\taddress revoker; // The revoking account.\n\tuint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title IEAS\n/// @notice EAS - Ethereum Attestation Service interface.\ninterface IEAS is ISemver {\n\t/// @notice Emitted when an attestation has been made.\n\t/// @param recipient The recipient of the attestation.\n\t/// @param attester The attesting account.\n\t/// @param uid The UID the revoked attestation.\n\t/// @param schemaUID The UID of the schema.\n\tevent Attested(\n\t\taddress indexed recipient,\n\t\taddress indexed attester,\n\t\tbytes32 uid,\n\t\tbytes32 indexed schemaUID\n\t);\n\n\t/// @notice Emitted when an attestation has been revoked.\n\t/// @param recipient The recipient of the attestation.\n\t/// @param attester The attesting account.\n\t/// @param schemaUID The UID of the schema.\n\t/// @param uid The UID the revoked attestation.\n\tevent Revoked(\n\t\taddress indexed recipient,\n\t\taddress indexed attester,\n\t\tbytes32 uid,\n\t\tbytes32 indexed schemaUID\n\t);\n\n\t/// @notice Emitted when a data has been timestamped.\n\t/// @param data The data.\n\t/// @param timestamp The timestamp.\n\tevent Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n\t/// @notice Emitted when a data has been revoked.\n\t/// @param revoker The address of the revoker.\n\t/// @param data The data.\n\t/// @param timestamp The timestamp.\n\tevent RevokedOffchain(\n\t\taddress indexed revoker,\n\t\tbytes32 indexed data,\n\t\tuint64 indexed timestamp\n\t);\n\n\t/// @notice Returns the address of the global schema registry.\n\t/// @return The address of the global schema registry.\n\tfunction getSchemaRegistry() external view returns (ISchemaRegistry);\n\n\t/// @notice Attests to a specific schema.\n\t/// @param request The arguments of the attestation request.\n\t/// @return The UID of the new attestation.\n\t///\n\t/// Example:\n\t///     attest({\n\t///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n\t///         data: {\n\t///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n\t///             expirationTime: 0,\n\t///             revocable: true,\n\t///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t///             data: \"0xF00D\",\n\t///             value: 0\n\t///         }\n\t///     })\n\tfunction attest(\n\t\tAttestationRequest calldata request\n\t) external payable returns (bytes32);\n\n\t/// @notice Attests to a specific schema via the provided ECDSA signature.\n\t/// @param delegatedRequest The arguments of the delegated attestation request.\n\t/// @return The UID of the new attestation.\n\t///\n\t/// Example:\n\t///     attestByDelegation({\n\t///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n\t///         data: {\n\t///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n\t///             expirationTime: 1673891048,\n\t///             revocable: true,\n\t///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t///             data: '0x1234',\n\t///             value: 0\n\t///         },\n\t///         signature: {\n\t///             v: 28,\n\t///             r: '0x148c...b25b',\n\t///             s: '0x5a72...be22'\n\t///         },\n\t///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n\t///         deadline: 1673891048\n\t///     })\n\tfunction attestByDelegation(\n\t\tDelegatedAttestationRequest calldata delegatedRequest\n\t) external payable returns (bytes32);\n\n\t/// @notice Attests to multiple schemas.\n\t/// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n\t///     schema ids to benefit from the best batching optimization.\n\t/// @return The UIDs of the new attestations.\n\t///\n\t/// Example:\n\t///     multiAttest([{\n\t///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n\t///         data: [{\n\t///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n\t///             expirationTime: 1673891048,\n\t///             revocable: true,\n\t///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t///             data: '0x1234',\n\t///             value: 1000\n\t///         },\n\t///         {\n\t///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n\t///             expirationTime: 0,\n\t///             revocable: false,\n\t///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n\t///             data: '0x00',\n\t///             value: 0\n\t///         }],\n\t///     },\n\t///     {\n\t///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n\t///         data: [{\n\t///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n\t///             expirationTime: 0,\n\t///             revocable: true,\n\t///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n\t///             data: '0x12345678',\n\t///             value: 0\n\t///         },\n\t///     }])\n\tfunction multiAttest(\n\t\tMultiAttestationRequest[] calldata multiRequests\n\t) external payable returns (bytes32[] memory);\n\n\t/// @notice Attests to multiple schemas using via provided ECDSA signatures.\n\t/// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n\t///     grouped by distinct schema ids to benefit from the best batching optimization.\n\t/// @return The UIDs of the new attestations.\n\t///\n\t/// Example:\n\t///     multiAttestByDelegation([{\n\t///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n\t///         data: [{\n\t///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n\t///             expirationTime: 1673891048,\n\t///             revocable: true,\n\t///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t///             data: '0x1234',\n\t///             value: 0\n\t///         },\n\t///         {\n\t///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n\t///             expirationTime: 0,\n\t///             revocable: false,\n\t///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t///             data: '0x00',\n\t///             value: 0\n\t///         }],\n\t///         signatures: [{\n\t///             v: 28,\n\t///             r: '0x148c...b25b',\n\t///             s: '0x5a72...be22'\n\t///         },\n\t///         {\n\t///             v: 28,\n\t///             r: '0x487s...67bb',\n\t///             s: '0x12ad...2366'\n\t///         }],\n\t///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n\t///         deadline: 1673891048\n\t///     }])\n\tfunction multiAttestByDelegation(\n\t\tMultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n\t) external payable returns (bytes32[] memory);\n\n\t/// @notice Revokes an existing attestation to a specific schema.\n\t/// @param request The arguments of the revocation request.\n\t///\n\t/// Example:\n\t///     revoke({\n\t///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n\t///         data: {\n\t///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n\t///             value: 0\n\t///         }\n\t///     })\n\tfunction revoke(RevocationRequest calldata request) external payable;\n\n\t/// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n\t/// @param delegatedRequest The arguments of the delegated revocation request.\n\t///\n\t/// Example:\n\t///     revokeByDelegation({\n\t///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n\t///         data: {\n\t///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n\t///             value: 0\n\t///         },\n\t///         signature: {\n\t///             v: 27,\n\t///             r: '0xb593...7142',\n\t///             s: '0x0f5b...2cce'\n\t///         },\n\t///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n\t///         deadline: 1673891048\n\t///     })\n\tfunction revokeByDelegation(\n\t\tDelegatedRevocationRequest calldata delegatedRequest\n\t) external payable;\n\n\t/// @notice Revokes existing attestations to multiple schemas.\n\t/// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n\t///     schema ids to benefit from the best batching optimization.\n\t///\n\t/// Example:\n\t///     multiRevoke([{\n\t///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n\t///         data: [{\n\t///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n\t///             value: 1000\n\t///         },\n\t///         {\n\t///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n\t///             value: 0\n\t///         }],\n\t///     },\n\t///     {\n\t///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n\t///         data: [{\n\t///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n\t///             value: 0\n\t///         },\n\t///     }])\n\tfunction multiRevoke(\n\t\tMultiRevocationRequest[] calldata multiRequests\n\t) external payable;\n\n\t/// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n\t/// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n\t///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n\t///\n\t/// Example:\n\t///     multiRevokeByDelegation([{\n\t///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n\t///         data: [{\n\t///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n\t///             value: 1000\n\t///         },\n\t///         {\n\t///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n\t///             value: 0\n\t///         }],\n\t///         signatures: [{\n\t///             v: 28,\n\t///             r: '0x148c...b25b',\n\t///             s: '0x5a72...be22'\n\t///         },\n\t///         {\n\t///             v: 28,\n\t///             r: '0x487s...67bb',\n\t///             s: '0x12ad...2366'\n\t///         }],\n\t///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n\t///         deadline: 1673891048\n\t///     }])\n\tfunction multiRevokeByDelegation(\n\t\tMultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n\t) external payable;\n\n\t/// @notice Timestamps the specified bytes32 data.\n\t/// @param data The data to timestamp.\n\t/// @return The timestamp the data was timestamped with.\n\tfunction timestamp(bytes32 data) external returns (uint64);\n\n\t/// @notice Timestamps the specified multiple bytes32 data.\n\t/// @param data The data to timestamp.\n\t/// @return The timestamp the data was timestamped with.\n\tfunction multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n\t/// @notice Revokes the specified bytes32 data.\n\t/// @param data The data to timestamp.\n\t/// @return The timestamp the data was revoked with.\n\tfunction revokeOffchain(bytes32 data) external returns (uint64);\n\n\t/// @notice Revokes the specified multiple bytes32 data.\n\t/// @param data The data to timestamp.\n\t/// @return The timestamp the data was revoked with.\n\tfunction multiRevokeOffchain(\n\t\tbytes32[] calldata data\n\t) external returns (uint64);\n\n\t/// @notice Returns an existing attestation by UID.\n\t/// @param uid The UID of the attestation to retrieve.\n\t/// @return The attestation data members.\n\tfunction getAttestation(\n\t\tbytes32 uid\n\t) external view returns (Attestation memory);\n\n\t/// @notice Checks whether an attestation exists.\n\t/// @param uid The UID of the attestation to retrieve.\n\t/// @return Whether an attestation exists.\n\tfunction isAttestationValid(bytes32 uid) external view returns (bool);\n\n\t/// @notice Returns the timestamp that the specified data was timestamped with.\n\t/// @param data The data to query.\n\t/// @return The timestamp the data was timestamped with.\n\tfunction getTimestamp(bytes32 data) external view returns (uint64);\n\n\t/// @notice Returns the timestamp that the specified data was timestamped with.\n\t/// @param data The data to query.\n\t/// @return The timestamp the data was timestamped with.\n\tfunction getRevokeOffchain(\n\t\taddress revoker,\n\t\tbytes32 data\n\t) external view returns (uint64);\n}\n"
    },
    "contracts/interfaces/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISemver } from \"./ISemver.sol\";\n\nimport { ISchemaResolver } from \"./ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n\tbytes32 uid; // The unique identifier of the schema.\n\tISchemaResolver resolver; // Optional schema resolver.\n\tbool revocable; // Whether the schema allows revocations explicitly.\n\tstring schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\ninterface ISchemaRegistry is ISemver {\n\t/// @notice Emitted when a new schema has been registered\n\t/// @param uid The schema UID.\n\t/// @param registerer The address of the account used to register the schema.\n\t/// @param schema The schema data.\n\tevent Registered(\n\t\tbytes32 indexed uid,\n\t\taddress indexed registerer,\n\t\tSchemaRecord schema\n\t);\n\n\t/// @notice Submits and reserves a new schema\n\t/// @param schema The schema data schema.\n\t/// @param resolver An optional schema resolver.\n\t/// @param revocable Whether the schema allows revocations explicitly.\n\t/// @return The UID of the new schema.\n\tfunction register(\n\t\tstring calldata schema,\n\t\tISchemaResolver resolver,\n\t\tbool revocable\n\t) external returns (bytes32);\n\n\t/// @notice Returns an existing schema by UID\n\t/// @param uid The UID of the schema to retrieve.\n\t/// @return The schema data members.\n\tfunction getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "contracts/interfaces/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISemver } from \"./ISemver.sol\";\nimport { Attestation } from \"../Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver is ISemver {\n\t/// @notice Checks if the resolver can be sent ETH.\n\t/// @return Whether the resolver supports ETH transfers.\n\tfunction isPayable() external pure returns (bool);\n\n\t/// @notice Processes an attestation and verifies whether it's valid.\n\t/// @param attestation The new attestation.\n\t/// @return Whether the attestation is valid.\n\tfunction attest(\n\t\tAttestation calldata attestation\n\t) external payable returns (bool);\n\n\t/// @notice Processes multiple attestations and verifies whether they are valid.\n\t/// @param attestations The new attestations.\n\t/// @param values Explicit ETH amounts which were sent with each attestation.\n\t/// @return Whether all the attestations are valid.\n\tfunction multiAttest(\n\t\tAttestation[] calldata attestations,\n\t\tuint256[] calldata values\n\t) external payable returns (bool);\n\n\t/// @notice Processes an attestation revocation and verifies if it can be revoked.\n\t/// @param attestation The existing attestation to be revoked.\n\t/// @return Whether the attestation can be revoked.\n\tfunction revoke(\n\t\tAttestation calldata attestation\n\t) external payable returns (bool);\n\n\t/// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n\t/// @param attestations The existing attestations to be revoked.\n\t/// @param values Explicit ETH amounts which were sent with each revocation.\n\t/// @return Whether the attestations can be revoked.\n\tfunction multiRevoke(\n\t\tAttestation[] calldata attestations,\n\t\tuint256[] calldata values\n\t) external payable returns (bool);\n}\n"
    },
    "contracts/interfaces/ISemver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\n/// @title ISemver\n/// @notice A semver interface.\ninterface ISemver {\n\t/// @notice Returns the full semver contract version.\n\t/// @return Semver contract version as a string.\n\tfunction version() external view returns (string memory);\n}\n"
    },
    "contracts/PrezkriptionRewardsResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport { SchemaResolver } from \"./SchemaResolver.sol\";\n\nimport { IEAS, Attestation } from \"./interfaces/IEAS.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title PrezkriptionRewardsResolver\n/// @notice A schema resolver that pays attesters for generated prezkriptions,\n/// @notice as well as fulfilled prescriptions (per revoking attestation)\ncontract PrezkriptionRewardsResolver is SchemaResolver, Ownable {\n\tusing Address for address payable;\n\n\terror InvalidValue();\n\n\tuint256 public incentive;\n\n\tconstructor(\n\t\tIEAS eas_,\n\t\tuint256 incentive_,\n\t\taddress owner_\n\t) SchemaResolver(eas_) {\n\t\tincentive = incentive_;\n\t\ttransferOwnership(owner_);\n\t}\n\n\tfunction updateIncentive(uint256 newIncentive) external onlyOwner {\n\t\tincentive = newIncentive;\n\t}\n\n\tfunction withdraw() external onlyOwner {\n\t\tuint256 balance = address(this).balance;\n\t\trequire(balance > 0, \"No funds to withdraw\");\n\t\tpayable(owner()).transfer(balance);\n\t}\n\n\tfunction isPayable() public pure override returns (bool) {\n\t\treturn true;\n\t}\n\n\tfunction onAttest(\n\t\tAttestation calldata attestation,\n\t\tuint256 value\n\t) internal override returns (bool) {\n\t\tif (value > 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tpayable(attestation.attester).transfer(incentive);\n\n\t\treturn true;\n\t}\n\n\tfunction onRevoke(\n\t\tAttestation calldata attestation,\n\t\tuint256 value\n\t) internal override returns (bool) {\n\t\tif (value > incentive) {\n\t\t\treturn false;\n\t\t}\n\t\tpayable(attestation.attester).transfer(incentive);\n\n\t\treturn true;\n\t}\n}\n"
    },
    "contracts/SchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { IEAS, Attestation } from \"./interfaces/IEAS.sol\";\nimport { AccessDenied, InvalidEAS, InvalidLength, uncheckedInc } from \"./Common.sol\";\nimport { Semver } from \"./Semver.sol\";\n\nimport { ISchemaResolver } from \"./interfaces/ISchemaResolver.sol\";\n\n/// @title SchemaResolver\n/// @notice The base schema resolver contract.\nabstract contract SchemaResolver is ISchemaResolver, Semver {\n\terror InsufficientValue();\n\terror NotPayable();\n\n\t// The global EAS contract.\n\tIEAS internal immutable _eas;\n\n\t/// @dev Creates a new resolver.\n\t/// @param eas The address of the global EAS contract.\n\tconstructor(IEAS eas) Semver(1, 3, 0) {\n\t\tif (address(eas) == address(0)) {\n\t\t\trevert InvalidEAS();\n\t\t}\n\n\t\t_eas = eas;\n\t}\n\n\t/// @dev Ensures that only the EAS contract can make this call.\n\tmodifier onlyEAS() {\n\t\t_onlyEAS();\n\n\t\t_;\n\t}\n\n\t/// @inheritdoc ISchemaResolver\n\tfunction isPayable() public pure virtual returns (bool) {\n\t\treturn false;\n\t}\n\n\t/// @dev ETH callback.\n\treceive() external payable virtual {\n\t\tif (!isPayable()) {\n\t\t\trevert NotPayable();\n\t\t}\n\t}\n\n\t/// @inheritdoc ISchemaResolver\n\tfunction attest(\n\t\tAttestation calldata attestation\n\t) external payable onlyEAS returns (bool) {\n\t\treturn onAttest(attestation, msg.value);\n\t}\n\n\t/// @inheritdoc ISchemaResolver\n\tfunction multiAttest(\n\t\tAttestation[] calldata attestations,\n\t\tuint256[] calldata values\n\t) external payable onlyEAS returns (bool) {\n\t\tuint256 length = attestations.length;\n\t\tif (length != values.length) {\n\t\t\trevert InvalidLength();\n\t\t}\n\n\t\t// We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\n\t\t// from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n\t\t// some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n\t\t// possible to send too much ETH anyway.\n\t\tuint256 remainingValue = msg.value;\n\n\t\tfor (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n\t\t\t// Ensure that the attester/revoker doesn't try to spend more than available.\n\t\t\tuint256 value = values[i];\n\t\t\tif (value > remainingValue) {\n\t\t\t\trevert InsufficientValue();\n\t\t\t}\n\n\t\t\t// Forward the attestation to the underlying resolver and return false in case it isn't approved.\n\t\t\tif (!onAttest(attestations[i], value)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tunchecked {\n\t\t\t\t// Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\n\t\t\t\tremainingValue -= value;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/// @inheritdoc ISchemaResolver\n\tfunction revoke(\n\t\tAttestation calldata attestation\n\t) external payable onlyEAS returns (bool) {\n\t\treturn onRevoke(attestation, msg.value);\n\t}\n\n\t/// @inheritdoc ISchemaResolver\n\tfunction multiRevoke(\n\t\tAttestation[] calldata attestations,\n\t\tuint256[] calldata values\n\t) external payable onlyEAS returns (bool) {\n\t\tuint256 length = attestations.length;\n\t\tif (length != values.length) {\n\t\t\trevert InvalidLength();\n\t\t}\n\n\t\t// We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\n\t\t// from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n\t\t// some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n\t\t// possible to send too much ETH anyway.\n\t\tuint256 remainingValue = msg.value;\n\n\t\tfor (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n\t\t\t// Ensure that the attester/revoker doesn't try to spend more than available.\n\t\t\tuint256 value = values[i];\n\t\t\tif (value > remainingValue) {\n\t\t\t\trevert InsufficientValue();\n\t\t\t}\n\n\t\t\t// Forward the revocation to the underlying resolver and return false in case it isn't approved.\n\t\t\tif (!onRevoke(attestations[i], value)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tunchecked {\n\t\t\t\t// Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\n\t\t\t\tremainingValue -= value;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/// @notice A resolver callback that should be implemented by child contracts.\n\t/// @param attestation The new attestation.\n\t/// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\n\t///     both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\n\t///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\n\t///     attestations in the batch.\n\t/// @return Whether the attestation is valid.\n\tfunction onAttest(\n\t\tAttestation calldata attestation,\n\t\tuint256 value\n\t) internal virtual returns (bool);\n\n\t/// @notice Processes an attestation revocation and verifies if it can be revoked.\n\t/// @param attestation The existing attestation to be revoked.\n\t/// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\n\t///     both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\n\t///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\n\t///     attestations in the batch.\n\t/// @return Whether the attestation can be revoked.\n\tfunction onRevoke(\n\t\tAttestation calldata attestation,\n\t\tuint256 value\n\t) internal virtual returns (bool);\n\n\t/// @dev Ensures that only the EAS contract can make this call.\n\tfunction _onlyEAS() private view {\n\t\tif (msg.sender != address(_eas)) {\n\t\t\trevert AccessDenied();\n\t\t}\n\t}\n}\n"
    },
    "contracts/Semver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport { ISemver } from \"./interfaces/ISemver.sol\";\n\n/// @title Semver\n/// @notice A simple contract for managing contract versions.\ncontract Semver is ISemver {\n\t// Contract's major version number.\n\tuint256 private immutable _major;\n\n\t// Contract's minor version number.\n\tuint256 private immutable _minor;\n\n\t// Contract's patch version number.\n\tuint256 private immutable _patch;\n\n\t/// @dev Create a new Semver instance.\n\t/// @param major Major version number.\n\t/// @param minor Minor version number.\n\t/// @param patch Patch version number.\n\tconstructor(uint256 major, uint256 minor, uint256 patch) {\n\t\t_major = major;\n\t\t_minor = minor;\n\t\t_patch = patch;\n\t}\n\n\t/// @notice Returns the full semver contract version.\n\t/// @return Semver contract version as a string.\n\tfunction version() external view returns (string memory) {\n\t\treturn\n\t\t\tstring(\n\t\t\t\tabi.encodePacked(\n\t\t\t\t\tStrings.toString(_major),\n\t\t\t\t\t\".\",\n\t\t\t\t\tStrings.toString(_minor),\n\t\t\t\t\t\".\",\n\t\t\t\t\tStrings.toString(_patch)\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}